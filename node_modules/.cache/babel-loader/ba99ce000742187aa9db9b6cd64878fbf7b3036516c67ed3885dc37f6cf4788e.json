{"ast":null,"code":"// src/services/api.js - VersÃ£o Corrigida sem User-Agent\nimport axios from 'axios';\n\n// URLs base das APIs\nconst STEINHQ_BASE_URL = 'https://api.steinhq.com/v1/storages/68ad1d03affba40a62f25e10';\nconst WHATSAPP_BASE_URL = 'https://evo.fluxodigitaltech.com.br';\n\n// ConfiguraÃ§Ã£o do axios para Steinhq\nconst steinhqAPI = axios.create({\n  baseURL: STEINHQ_BASE_URL,\n  timeout: 10000\n});\n\n// ConfiguraÃ§Ã£o do axios para WhatsApp\nconst whatsappAPI = axios.create({\n  baseURL: WHATSAPP_BASE_URL,\n  timeout: 30000\n});\n\n// Interceptors para tratamento de erros\nsteinhqAPI.interceptors.response.use(response => response, error => {\n  console.error('Erro na requisiÃ§Ã£o Steinhq API:', error);\n  throw error;\n});\nwhatsappAPI.interceptors.response.use(response => response, error => {\n  console.error('Erro na requisiÃ§Ã£o WhatsApp API:', error);\n  throw error;\n});\n\n// FunÃ§Ã£o para criar headers do WhatsApp (SEM User-Agent para evitar erro)\nconst createWhatsAppHeaders = apiKey => {\n  return {\n    'apikey': apiKey,\n    'Content-Type': 'application/json'\n  };\n};\n\n// ==================== AUTH API ====================\nexport const authAPI = {\n  login: email => steinhqAPI.get(`/login?email=${encodeURIComponent(email)}`),\n  register: userData => steinhqAPI.post('/login', [userData]),\n  checkEmail: email => steinhqAPI.get(`/login?email=${encodeURIComponent(email)}`)\n};\n\n// ==================== DISPATCH API (STEINHQ) - CORRIGIDO ====================\nexport const dispatchAPI = {\n  // Buscar registro especÃ­fico por ID do cliente (CORRIGIDO)\n  getByClientId: async clientId => {\n    try {\n      console.log(`ðŸ“Š Buscando disparo especÃ­fico para cliente: ${clientId}`);\n\n      // Fazer requisiÃ§Ã£o direta para o ID especÃ­fico\n      const response = await steinhqAPI.get(`/disparo/${clientId}`);\n      if (response.data && response.data.length > 0) {\n        const record = response.data[0];\n        console.log(`ðŸ“Š Registro encontrado:`, record);\n        return record;\n      } else {\n        console.log(`ðŸ“Š Nenhum registro encontrado para cliente: ${clientId}`);\n        return null;\n      }\n    } catch (error) {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n        console.log(`ðŸ“Š Cliente ${clientId} nÃ£o existe na API de disparo`);\n        return null;\n      }\n      console.error('Erro ao buscar registro de disparo:', error);\n      return null;\n    }\n  },\n  // Atualizar contagem de disparo (PUT) - CORRIGIDO\n  update: async (clientId, newCount) => {\n    try {\n      console.log(`ðŸ“Š Atualizando disparo para cliente ${clientId}: ${newCount}`);\n      const response = await steinhqAPI.put(`/disparo/${clientId}`, {\n        disparo: newCount.toString()\n      });\n      console.log(`âœ… Disparo atualizado com sucesso`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar disparo:', error);\n      throw error;\n    }\n  },\n  // Criar novo registro de disparo (POST) - CORRIGIDO\n  create: async (clientId, initialCount = 1) => {\n    try {\n      console.log(`ðŸ“Š Criando novo registro de disparo para cliente ${clientId}: ${initialCount}`);\n      const response = await steinhqAPI.post('/disparo', {\n        id: clientId,\n        disparo: initialCount.toString()\n      });\n      console.log(`âœ… Registro criado com sucesso`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar registro de disparo:', error);\n      throw error;\n    }\n  },\n  // Incrementar contagem de disparo (CORRIGIDO - usa ID especÃ­fico)\n  increment: async (clientId, incrementBy = 1) => {\n    try {\n      console.log(`ðŸ“Š Incrementando disparo para cliente ${clientId} em ${incrementBy}`);\n\n      // Buscar registro atual usando ID especÃ­fico\n      const currentRecord = await dispatchAPI.getByClientId(clientId);\n      if (currentRecord) {\n        // Registro existe - fazer PUT\n        const currentCount = currentRecord.disparo === null || currentRecord.disparo === undefined ? 0 : parseInt(currentRecord.disparo) || 0;\n        const newCount = currentCount + incrementBy;\n        console.log(`ðŸ“Š Atualizando de ${currentCount} para ${newCount}`);\n        await dispatchAPI.update(clientId, newCount);\n        return newCount;\n      } else {\n        // Registro nÃ£o existe - fazer POST\n        console.log(`ðŸ“Š Criando novo registro com ${incrementBy} disparos`);\n        await dispatchAPI.create(clientId, incrementBy);\n        return incrementBy;\n      }\n    } catch (error) {\n      console.error('Erro ao incrementar disparo:', error);\n      throw error;\n    }\n  },\n  // Obter contagem atual de disparo para um cliente (CORRIGIDO)\n  getCount: async clientId => {\n    try {\n      console.log(`ðŸ“Š Obtendo contagem para cliente: ${clientId}`);\n      const record = await dispatchAPI.getByClientId(clientId);\n      if (record) {\n        const count = record.disparo === null || record.disparo === undefined ? 0 : parseInt(record.disparo) || 0;\n        console.log(`ðŸ“Š Contagem obtida: ${count}`);\n        return count;\n      }\n      console.log(`ðŸ“Š Nenhum registro encontrado, retornando 0`);\n      return 0;\n    } catch (error) {\n      console.error('Erro ao obter contagem de disparo:', error);\n      return 0;\n    }\n  }\n};\n\n// ==================== WHATSAPP INSTANCE API ====================\nexport const instanceAPI = {\n  // Verificar estado da conexÃ£o (SEM User-Agent)\n  checkConnectionState: async (instanceId, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(`/instance/connectionState/${instanceId}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao verificar estado da conexÃ£o:', error);\n      throw error;\n    }\n  },\n  // Conectar instÃ¢ncia (SEM User-Agent)\n  connect: async (instanceId, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(`/instance/connect/${instanceId}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao conectar instÃ¢ncia:', error);\n      throw error;\n    }\n  },\n  // Criar instÃ¢ncia (SEM User-Agent)\n  create: async (instanceData, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.post('/instance/create', instanceData, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar instÃ¢ncia:', error);\n      throw error;\n    }\n  },\n  // Fazer logout da instÃ¢ncia (SEM User-Agent)\n  logout: async (instanceId, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.delete(`/instance/logout/${instanceId}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao fazer logout da instÃ¢ncia:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== WHATSAPP GROUPS API ====================\nexport const groupsAPI = {\n  // Buscar todos os grupos (SEM User-Agent)\n  fetchAll: async (instanceId, apiKey, getParticipants = true) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(`/group/fetchAllGroups/${instanceId}?getParticipants=${getParticipants}`, {\n        headers\n      });\n      return response.data || [];\n    } catch (error) {\n      console.error('Erro ao buscar grupos:', error);\n      return [];\n    }\n  },\n  // Buscar informaÃ§Ãµes de um grupo especÃ­fico (SEM User-Agent)\n  getInfo: async (instanceId, groupJid, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(`/group/findGroupInfos/${instanceId}?groupJid=${encodeURIComponent(groupJid)}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar informaÃ§Ãµes do grupo:', error);\n      throw error;\n    }\n  },\n  // Criar grupo (SEM User-Agent)\n  create: async (instanceId, groupData, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.post(`/group/create/${instanceId}`, groupData, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar grupo:', error);\n      throw error;\n    }\n  },\n  // Sair do grupo (SEM User-Agent)\n  leave: async (instanceId, groupJid, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.delete(`/group/leaveGroup/${instanceId}?groupJid=${encodeURIComponent(groupJid)}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao sair do grupo:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== WHATSAPP CONTACTS API ====================\nexport const contactsAPI = {\n  // Buscar todos os contatos (SEM User-Agent)\n  fetchAll: async (instanceId, apiKey) => {\n    try {\n      var _response$data;\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(`/chat/fetchContacts/${instanceId}`, {\n        headers\n      });\n      return ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.contacts) || [];\n    } catch (error) {\n      console.error('Erro ao buscar contatos:', error);\n      return [];\n    }\n  }\n};\n\n// ==================== WHATSAPP MESSAGES API ====================\nexport const messagesAPI = {\n  // Enviar mensagem de texto (SEM User-Agent)\n  sendText: async (instanceId, messageData, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.post(`/message/sendText/${instanceId}`, messageData, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao enviar mensagem:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== UTILITY FUNCTIONS ====================\nexport const apiUtils = {\n  // Validar e formatar nÃºmero de telefone\n  validateAndFormatPhoneNumber: number => {\n    if (!number) return null;\n    let formattedNumber = number.replace(/[^\\d@\\.\\-]/g, '');\n    if (!/^\\d+/.test(formattedNumber)) return null;\n    return formattedNumber;\n  },\n  // Extrair nÃºmero do ID do WhatsApp\n  extractPhoneNumber: whatsappId => {\n    if (!whatsappId) return null;\n    return whatsappId.split('@')[0];\n  },\n  // Normalizar nÃºmeros para comparaÃ§Ã£o\n  normalizePhoneNumber: number => {\n    if (!number) return '';\n    const cleaned = number.toString().replace(/\\D/g, '');\n    if (cleaned.startsWith('55') && cleaned.length > 11) {\n      return cleaned.substring(2);\n    }\n    return cleaned;\n  },\n  // Criar headers para WhatsApp (SEM User-Agent)\n  createWhatsAppHeaders\n};\n\n// ExportaÃ§Ã£o padrÃ£o com todas as APIs\nexport default {\n  auth: authAPI,\n  dispatch: dispatchAPI,\n  instance: instanceAPI,\n  groups: groupsAPI,\n  contacts: contactsAPI,\n  messages: messagesAPI,\n  utils: apiUtils\n};","map":{"version":3,"names":["axios","STEINHQ_BASE_URL","WHATSAPP_BASE_URL","steinhqAPI","create","baseURL","timeout","whatsappAPI","interceptors","response","use","error","console","createWhatsAppHeaders","apiKey","authAPI","login","email","get","encodeURIComponent","register","userData","post","checkEmail","dispatchAPI","getByClientId","clientId","log","data","length","record","_error$response","status","update","newCount","put","disparo","toString","initialCount","id","increment","incrementBy","currentRecord","currentCount","undefined","parseInt","getCount","count","instanceAPI","checkConnectionState","instanceId","headers","connect","instanceData","logout","delete","groupsAPI","fetchAll","getParticipants","getInfo","groupJid","groupData","leave","contactsAPI","_response$data","contacts","messagesAPI","sendText","messageData","apiUtils","validateAndFormatPhoneNumber","number","formattedNumber","replace","test","extractPhoneNumber","whatsappId","split","normalizePhoneNumber","cleaned","startsWith","substring","auth","dispatch","instance","groups","messages","utils"],"sources":["/Users/macbook/Documents/b/fluxoconnect-app/src/services/api.js"],"sourcesContent":["// src/services/api.js - VersÃ£o Corrigida sem User-Agent\nimport axios from 'axios';\n\n// URLs base das APIs\nconst STEINHQ_BASE_URL = 'https://api.steinhq.com/v1/storages/68ad1d03affba40a62f25e10';\nconst WHATSAPP_BASE_URL = 'https://evo.fluxodigitaltech.com.br';\n\n// ConfiguraÃ§Ã£o do axios para Steinhq\nconst steinhqAPI = axios.create({\n  baseURL: STEINHQ_BASE_URL,\n  timeout: 10000,\n});\n\n// ConfiguraÃ§Ã£o do axios para WhatsApp\nconst whatsappAPI = axios.create({\n  baseURL: WHATSAPP_BASE_URL,\n  timeout: 30000,\n});\n\n// Interceptors para tratamento de erros\nsteinhqAPI.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('Erro na requisiÃ§Ã£o Steinhq API:', error);\n    throw error;\n  }\n);\n\nwhatsappAPI.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('Erro na requisiÃ§Ã£o WhatsApp API:', error);\n    throw error;\n  }\n);\n\n// FunÃ§Ã£o para criar headers do WhatsApp (SEM User-Agent para evitar erro)\nconst createWhatsAppHeaders = (apiKey) => {\n  return {\n    'apikey': apiKey,\n    'Content-Type': 'application/json'\n  };\n};\n\n// ==================== AUTH API ====================\nexport const authAPI = {\n  login: (email) => steinhqAPI.get(`/login?email=${encodeURIComponent(email)}`),\n  register: (userData) => steinhqAPI.post('/login', [userData]),\n  checkEmail: (email) => steinhqAPI.get(`/login?email=${encodeURIComponent(email)}`)\n};\n\n// ==================== DISPATCH API (STEINHQ) - CORRIGIDO ====================\nexport const dispatchAPI = {\n  // Buscar registro especÃ­fico por ID do cliente (CORRIGIDO)\n  getByClientId: async (clientId) => {\n    try {\n      console.log(`ðŸ“Š Buscando disparo especÃ­fico para cliente: ${clientId}`);\n      \n      // Fazer requisiÃ§Ã£o direta para o ID especÃ­fico\n      const response = await steinhqAPI.get(`/disparo/${clientId}`);\n      \n      if (response.data && response.data.length > 0) {\n        const record = response.data[0];\n        console.log(`ðŸ“Š Registro encontrado:`, record);\n        return record;\n      } else {\n        console.log(`ðŸ“Š Nenhum registro encontrado para cliente: ${clientId}`);\n        return null;\n      }\n    } catch (error) {\n      if (error.response?.status === 404) {\n        console.log(`ðŸ“Š Cliente ${clientId} nÃ£o existe na API de disparo`);\n        return null;\n      }\n      console.error('Erro ao buscar registro de disparo:', error);\n      return null;\n    }\n  },\n  \n  // Atualizar contagem de disparo (PUT) - CORRIGIDO\n  update: async (clientId, newCount) => {\n    try {\n      console.log(`ðŸ“Š Atualizando disparo para cliente ${clientId}: ${newCount}`);\n      \n      const response = await steinhqAPI.put(`/disparo/${clientId}`, {\n        disparo: newCount.toString()\n      });\n      \n      console.log(`âœ… Disparo atualizado com sucesso`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar disparo:', error);\n      throw error;\n    }\n  },\n  \n  // Criar novo registro de disparo (POST) - CORRIGIDO\n  create: async (clientId, initialCount = 1) => {\n    try {\n      console.log(`ðŸ“Š Criando novo registro de disparo para cliente ${clientId}: ${initialCount}`);\n      \n      const response = await steinhqAPI.post('/disparo', {\n        id: clientId,\n        disparo: initialCount.toString()\n      });\n      \n      console.log(`âœ… Registro criado com sucesso`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar registro de disparo:', error);\n      throw error;\n    }\n  },\n  \n  // Incrementar contagem de disparo (CORRIGIDO - usa ID especÃ­fico)\n  increment: async (clientId, incrementBy = 1) => {\n    try {\n      console.log(`ðŸ“Š Incrementando disparo para cliente ${clientId} em ${incrementBy}`);\n      \n      // Buscar registro atual usando ID especÃ­fico\n      const currentRecord = await dispatchAPI.getByClientId(clientId);\n      \n      if (currentRecord) {\n        // Registro existe - fazer PUT\n        const currentCount = currentRecord.disparo === null || currentRecord.disparo === undefined ? 0 : parseInt(currentRecord.disparo) || 0;\n        const newCount = currentCount + incrementBy;\n        \n        console.log(`ðŸ“Š Atualizando de ${currentCount} para ${newCount}`);\n        await dispatchAPI.update(clientId, newCount);\n        return newCount;\n      } else {\n        // Registro nÃ£o existe - fazer POST\n        console.log(`ðŸ“Š Criando novo registro com ${incrementBy} disparos`);\n        await dispatchAPI.create(clientId, incrementBy);\n        return incrementBy;\n      }\n    } catch (error) {\n      console.error('Erro ao incrementar disparo:', error);\n      throw error;\n    }\n  },\n  \n  // Obter contagem atual de disparo para um cliente (CORRIGIDO)\n  getCount: async (clientId) => {\n    try {\n      console.log(`ðŸ“Š Obtendo contagem para cliente: ${clientId}`);\n      \n      const record = await dispatchAPI.getByClientId(clientId);\n      if (record) {\n        const count = record.disparo === null || record.disparo === undefined ? 0 : parseInt(record.disparo) || 0;\n        console.log(`ðŸ“Š Contagem obtida: ${count}`);\n        return count;\n      }\n      \n      console.log(`ðŸ“Š Nenhum registro encontrado, retornando 0`);\n      return 0;\n    } catch (error) {\n      console.error('Erro ao obter contagem de disparo:', error);\n      return 0;\n    }\n  }\n};\n\n// ==================== WHATSAPP INSTANCE API ====================\nexport const instanceAPI = {\n  // Verificar estado da conexÃ£o (SEM User-Agent)\n  checkConnectionState: async (instanceId, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(`/instance/connectionState/${instanceId}`, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao verificar estado da conexÃ£o:', error);\n      throw error;\n    }\n  },\n  \n  // Conectar instÃ¢ncia (SEM User-Agent)\n  connect: async (instanceId, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(`/instance/connect/${instanceId}`, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao conectar instÃ¢ncia:', error);\n      throw error;\n    }\n  },\n  \n  // Criar instÃ¢ncia (SEM User-Agent)\n  create: async (instanceData, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.post('/instance/create', instanceData, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar instÃ¢ncia:', error);\n      throw error;\n    }\n  },\n  \n  // Fazer logout da instÃ¢ncia (SEM User-Agent)\n  logout: async (instanceId, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.delete(`/instance/logout/${instanceId}`, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao fazer logout da instÃ¢ncia:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== WHATSAPP GROUPS API ====================\nexport const groupsAPI = {\n  // Buscar todos os grupos (SEM User-Agent)\n  fetchAll: async (instanceId, apiKey, getParticipants = true) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(\n        `/group/fetchAllGroups/${instanceId}?getParticipants=${getParticipants}`, \n        { headers }\n      );\n      return response.data || [];\n    } catch (error) {\n      console.error('Erro ao buscar grupos:', error);\n      return [];\n    }\n  },\n  \n  // Buscar informaÃ§Ãµes de um grupo especÃ­fico (SEM User-Agent)\n  getInfo: async (instanceId, groupJid, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(\n        `/group/findGroupInfos/${instanceId}?groupJid=${encodeURIComponent(groupJid)}`,\n        { headers }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar informaÃ§Ãµes do grupo:', error);\n      throw error;\n    }\n  },\n  \n  // Criar grupo (SEM User-Agent)\n  create: async (instanceId, groupData, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.post(`/group/create/${instanceId}`, groupData, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar grupo:', error);\n      throw error;\n    }\n  },\n  \n  // Sair do grupo (SEM User-Agent)\n  leave: async (instanceId, groupJid, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.delete(\n        `/group/leaveGroup/${instanceId}?groupJid=${encodeURIComponent(groupJid)}`,\n        { headers }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao sair do grupo:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== WHATSAPP CONTACTS API ====================\nexport const contactsAPI = {\n  // Buscar todos os contatos (SEM User-Agent)\n  fetchAll: async (instanceId, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.get(`/chat/fetchContacts/${instanceId}`, { headers });\n      return response.data?.contacts || [];\n    } catch (error) {\n      console.error('Erro ao buscar contatos:', error);\n      return [];\n    }\n  }\n};\n\n// ==================== WHATSAPP MESSAGES API ====================\nexport const messagesAPI = {\n  // Enviar mensagem de texto (SEM User-Agent)\n  sendText: async (instanceId, messageData, apiKey) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey);\n      const response = await whatsappAPI.post(`/message/sendText/${instanceId}`, messageData, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao enviar mensagem:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== UTILITY FUNCTIONS ====================\nexport const apiUtils = {\n  // Validar e formatar nÃºmero de telefone\n  validateAndFormatPhoneNumber: (number) => {\n    if (!number) return null;\n    let formattedNumber = number.replace(/[^\\d@\\.\\-]/g, '');\n    if (!/^\\d+/.test(formattedNumber)) return null;\n    return formattedNumber;\n  },\n  \n  // Extrair nÃºmero do ID do WhatsApp\n  extractPhoneNumber: (whatsappId) => {\n    if (!whatsappId) return null;\n    return whatsappId.split('@')[0];\n  },\n  \n  // Normalizar nÃºmeros para comparaÃ§Ã£o\n  normalizePhoneNumber: (number) => {\n    if (!number) return '';\n    const cleaned = number.toString().replace(/\\D/g, '');\n    if (cleaned.startsWith('55') && cleaned.length > 11) {\n      return cleaned.substring(2);\n    }\n    return cleaned;\n  },\n  \n  // Criar headers para WhatsApp (SEM User-Agent)\n  createWhatsAppHeaders\n};\n\n// ExportaÃ§Ã£o padrÃ£o com todas as APIs\nexport default {\n  auth: authAPI,\n  dispatch: dispatchAPI,\n  instance: instanceAPI,\n  groups: groupsAPI,\n  contacts: contactsAPI,\n  messages: messagesAPI,\n  utils: apiUtils\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}