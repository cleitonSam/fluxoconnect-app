{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// URLs base das APIs\nconst STEINHQ_BASE_URL = 'https://api.steinhq.com/v1/storages/68ad1d03affba40a62f25e10';\nconst WHATSAPP_BASE_URL = 'https://evo.fluxodigitaltech.com.br';\n\n// ConfiguraÃ§Ã£o do axios para Steinhq\nconst steinhqAPI = axios.create({\n  baseURL: STEINHQ_BASE_URL,\n  timeout: 10000\n});\n\n// ConfiguraÃ§Ã£o do axios para WhatsApp\nconst whatsappAPI = axios.create({\n  baseURL: WHATSAPP_BASE_URL,\n  timeout: 30000\n});\n\n// Interceptors para tratamento de erros\nsteinhqAPI.interceptors.response.use(response => response, error => {\n  console.error('Erro na requisiÃ§Ã£o Steinhq API:', error);\n  throw error;\n});\nwhatsappAPI.interceptors.response.use(response => response, error => {\n  console.error('Erro na requisiÃ§Ã£o WhatsApp API:', error);\n  throw error;\n});\n\n// User Agents para rotaÃ§Ã£o\nconst USER_AGENTS = ['WhatsApp/2.23.24.76 A', 'WhatsApp/2.23.20.0 A', 'WhatsApp/2.23.19.75 A', 'WhatsApp/2.23.18.76 A', 'WhatsApp/2.23.17.73 A'];\n\n// FunÃ§Ã£o para obter user agent aleatÃ³rio\nconst getRandomUserAgent = () => {\n  return USER_AGENTS[Math.floor(Math.random() * USER_AGENTS.length)];\n};\n\n// FunÃ§Ã£o para criar headers do WhatsApp\nconst createWhatsAppHeaders = (apiKey, useUserAgentRotation = false) => {\n  const headers = {\n    'apikey': apiKey\n  };\n  if (useUserAgentRotation) {\n    headers['User-Agent'] = getRandomUserAgent();\n  }\n  return headers;\n};\n\n// ==================== AUTH API ====================\nexport const authAPI = {\n  login: email => steinhqAPI.get(`/login?email=${encodeURIComponent(email)}`),\n  register: userData => steinhqAPI.post('/login', [userData]),\n  checkEmail: email => steinhqAPI.get(`/login?email=${encodeURIComponent(email)}`)\n};\n\n// ==================== DISPATCH API (STEINHQ) ====================\nexport const dispatchAPI = {\n  // Buscar todos os registros de disparo\n  getAll: () => steinhqAPI.get('/disparo'),\n  // Buscar registro especÃ­fico por ID\n  getById: async clientId => {\n    try {\n      const response = await steinhqAPI.get('/disparo');\n      const data = response.data;\n      const userRecord = data.find(record => record.id === clientId);\n      return userRecord || null;\n    } catch (error) {\n      console.error('Erro ao buscar registro de disparo:', error);\n      return null;\n    }\n  },\n  // Atualizar contagem de disparo (PUT)\n  update: async (clientId, newCount) => {\n    try {\n      const response = await steinhqAPI.put(`/disparo/${clientId}`, {\n        disparo: newCount.toString()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar disparo:', error);\n      throw error;\n    }\n  },\n  // Criar novo registro de disparo (POST)\n  create: async (clientId, initialCount = 1) => {\n    try {\n      const response = await steinhqAPI.post('/disparo', {\n        id: clientId,\n        disparo: initialCount.toString()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar registro de disparo:', error);\n      throw error;\n    }\n  },\n  // Incrementar contagem de disparo (busca, verifica e atualiza/cria)\n  increment: async (clientId, incrementBy = 1) => {\n    try {\n      console.log(`ðŸ“Š Incrementando disparo para cliente ${clientId} em ${incrementBy}`);\n\n      // Buscar registro atual\n      const currentRecord = await dispatchAPI.getById(clientId);\n      if (currentRecord) {\n        // Registro existe - fazer PUT\n        const currentCount = currentRecord.disparo === null ? 0 : parseInt(currentRecord.disparo) || 0;\n        const newCount = currentCount + incrementBy;\n        console.log(`ðŸ“Š Atualizando de ${currentCount} para ${newCount}`);\n        await dispatchAPI.update(clientId, newCount);\n        return newCount;\n      } else {\n        // Registro nÃ£o existe - fazer POST\n        console.log(`ðŸ“Š Criando novo registro com ${incrementBy} disparos`);\n        await dispatchAPI.create(clientId, incrementBy);\n        return incrementBy;\n      }\n    } catch (error) {\n      console.error('Erro ao incrementar disparo:', error);\n      throw error;\n    }\n  },\n  // Obter contagem atual de disparo para um cliente\n  getCount: async clientId => {\n    try {\n      const record = await dispatchAPI.getById(clientId);\n      if (record) {\n        return record.disparo === null ? 0 : parseInt(record.disparo) || 0;\n      }\n      return 0;\n    } catch (error) {\n      console.error('Erro ao obter contagem de disparo:', error);\n      return 0;\n    }\n  }\n};\n\n// ==================== WHATSAPP INSTANCE API ====================\nexport const instanceAPI = {\n  // Verificar estado da conexÃ£o\n  checkConnectionState: async (instanceId, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(`/instance/connectionState/${instanceId}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao verificar estado da conexÃ£o:', error);\n      throw error;\n    }\n  },\n  // Conectar instÃ¢ncia\n  connect: async (instanceId, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(`/instance/connect/${instanceId}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao conectar instÃ¢ncia:', error);\n      throw error;\n    }\n  },\n  // Criar instÃ¢ncia\n  create: async (instanceData, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = {\n        'Content-Type': 'application/json',\n        ...createWhatsAppHeaders(apiKey, useUserAgentRotation)\n      };\n      const response = await whatsappAPI.post('/instance/create', instanceData, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar instÃ¢ncia:', error);\n      throw error;\n    }\n  },\n  // Fazer logout da instÃ¢ncia\n  logout: async (instanceId, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.delete(`/instance/logout/${instanceId}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao fazer logout da instÃ¢ncia:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== WHATSAPP GROUPS API ====================\nexport const groupsAPI = {\n  // Buscar todos os grupos\n  fetchAll: async (instanceId, apiKey, getParticipants = true, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(`/group/fetchAllGroups/${instanceId}?getParticipants=${getParticipants}`, {\n        headers\n      });\n      return response.data || [];\n    } catch (error) {\n      console.error('Erro ao buscar grupos:', error);\n      return [];\n    }\n  },\n  // Buscar informaÃ§Ãµes de um grupo especÃ­fico\n  getInfo: async (instanceId, groupJid, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(`/group/findGroupInfos/${instanceId}?groupJid=${encodeURIComponent(groupJid)}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar informaÃ§Ãµes do grupo:', error);\n      throw error;\n    }\n  },\n  // Criar grupo\n  create: async (instanceId, groupData, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = {\n        'Content-Type': 'application/json',\n        ...createWhatsAppHeaders(apiKey, useUserAgentRotation)\n      };\n      const response = await whatsappAPI.post(`/group/create/${instanceId}`, groupData, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar grupo:', error);\n      throw error;\n    }\n  },\n  // Sair do grupo\n  leave: async (instanceId, groupJid, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.delete(`/group/leaveGroup/${instanceId}?groupJid=${encodeURIComponent(groupJid)}`, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao sair do grupo:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== WHATSAPP CONTACTS API ====================\nexport const contactsAPI = {\n  // Buscar todos os contatos\n  fetchAll: async (instanceId, apiKey, useUserAgentRotation = false) => {\n    try {\n      var _response$data;\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(`/chat/fetchContacts/${instanceId}`, {\n        headers\n      });\n      return ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.contacts) || [];\n    } catch (error) {\n      console.error('Erro ao buscar contatos:', error);\n      return [];\n    }\n  }\n};\n\n// ==================== WHATSAPP MESSAGES API ====================\nexport const messagesAPI = {\n  // Enviar mensagem de texto\n  sendText: async (instanceId, messageData, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = {\n        'Content-Type': 'application/json',\n        ...createWhatsAppHeaders(apiKey, useUserAgentRotation)\n      };\n      const response = await whatsappAPI.post(`/message/sendText/${instanceId}`, messageData, {\n        headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao enviar mensagem:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== UTILITY FUNCTIONS ====================\nexport const apiUtils = {\n  // Validar e formatar nÃºmero de telefone\n  validateAndFormatPhoneNumber: number => {\n    if (!number) return null;\n    let formattedNumber = number.replace(/[^\\d@\\.\\-]/g, '');\n    if (!/^\\d+/.test(formattedNumber)) return null;\n    return formattedNumber;\n  },\n  // Extrair nÃºmero do ID do WhatsApp\n  extractPhoneNumber: whatsappId => {\n    if (!whatsappId) return null;\n    return whatsappId.split('@')[0];\n  },\n  // Normalizar nÃºmeros para comparaÃ§Ã£o\n  normalizePhoneNumber: number => {\n    if (!number) return '';\n    const cleaned = number.toString().replace(/\\D/g, '');\n    if (cleaned.startsWith('55') && cleaned.length > 11) {\n      return cleaned.substring(2);\n    }\n    return cleaned;\n  },\n  // Obter user agent aleatÃ³rio\n  getRandomUserAgent,\n  // Criar headers para WhatsApp\n  createWhatsAppHeaders\n};\n\n// ExportaÃ§Ã£o padrÃ£o com todas as APIs\nexport default {\n  auth: authAPI,\n  dispatch: dispatchAPI,\n  instance: instanceAPI,\n  groups: groupsAPI,\n  contacts: contactsAPI,\n  messages: messagesAPI,\n  utils: apiUtils\n};","map":{"version":3,"names":["axios","STEINHQ_BASE_URL","WHATSAPP_BASE_URL","steinhqAPI","create","baseURL","timeout","whatsappAPI","interceptors","response","use","error","console","USER_AGENTS","getRandomUserAgent","Math","floor","random","length","createWhatsAppHeaders","apiKey","useUserAgentRotation","headers","authAPI","login","email","get","encodeURIComponent","register","userData","post","checkEmail","dispatchAPI","getAll","getById","clientId","data","userRecord","find","record","id","update","newCount","put","disparo","toString","initialCount","increment","incrementBy","log","currentRecord","currentCount","parseInt","getCount","instanceAPI","checkConnectionState","instanceId","connect","instanceData","logout","delete","groupsAPI","fetchAll","getParticipants","getInfo","groupJid","groupData","leave","contactsAPI","_response$data","contacts","messagesAPI","sendText","messageData","apiUtils","validateAndFormatPhoneNumber","number","formattedNumber","replace","test","extractPhoneNumber","whatsappId","split","normalizePhoneNumber","cleaned","startsWith","substring","auth","dispatch","instance","groups","messages","utils"],"sources":["/Users/macbook/Documents/b/fluxoconnect-app/src/services/api.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\n\n// URLs base das APIs\nconst STEINHQ_BASE_URL = 'https://api.steinhq.com/v1/storages/68ad1d03affba40a62f25e10';\nconst WHATSAPP_BASE_URL = 'https://evo.fluxodigitaltech.com.br';\n\n// ConfiguraÃ§Ã£o do axios para Steinhq\nconst steinhqAPI = axios.create({\n  baseURL: STEINHQ_BASE_URL,\n  timeout: 10000,\n});\n\n// ConfiguraÃ§Ã£o do axios para WhatsApp\nconst whatsappAPI = axios.create({\n  baseURL: WHATSAPP_BASE_URL,\n  timeout: 30000,\n});\n\n// Interceptors para tratamento de erros\nsteinhqAPI.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('Erro na requisiÃ§Ã£o Steinhq API:', error);\n    throw error;\n  }\n);\n\nwhatsappAPI.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('Erro na requisiÃ§Ã£o WhatsApp API:', error);\n    throw error;\n  }\n);\n\n// User Agents para rotaÃ§Ã£o\nconst USER_AGENTS = [\n  'WhatsApp/2.23.24.76 A',\n  'WhatsApp/2.23.20.0 A',\n  'WhatsApp/2.23.19.75 A',\n  'WhatsApp/2.23.18.76 A',\n  'WhatsApp/2.23.17.73 A'\n];\n\n// FunÃ§Ã£o para obter user agent aleatÃ³rio\nconst getRandomUserAgent = () => {\n  return USER_AGENTS[Math.floor(Math.random() * USER_AGENTS.length)];\n};\n\n// FunÃ§Ã£o para criar headers do WhatsApp\nconst createWhatsAppHeaders = (apiKey, useUserAgentRotation = false) => {\n  const headers = {\n    'apikey': apiKey\n  };\n  \n  if (useUserAgentRotation) {\n    headers['User-Agent'] = getRandomUserAgent();\n  }\n  \n  return headers;\n};\n\n// ==================== AUTH API ====================\nexport const authAPI = {\n  login: (email) => steinhqAPI.get(`/login?email=${encodeURIComponent(email)}`),\n  register: (userData) => steinhqAPI.post('/login', [userData]),\n  checkEmail: (email) => steinhqAPI.get(`/login?email=${encodeURIComponent(email)}`)\n};\n\n// ==================== DISPATCH API (STEINHQ) ====================\nexport const dispatchAPI = {\n  // Buscar todos os registros de disparo\n  getAll: () => steinhqAPI.get('/disparo'),\n  \n  // Buscar registro especÃ­fico por ID\n  getById: async (clientId) => {\n    try {\n      const response = await steinhqAPI.get('/disparo');\n      const data = response.data;\n      const userRecord = data.find(record => record.id === clientId);\n      return userRecord || null;\n    } catch (error) {\n      console.error('Erro ao buscar registro de disparo:', error);\n      return null;\n    }\n  },\n  \n  // Atualizar contagem de disparo (PUT)\n  update: async (clientId, newCount) => {\n    try {\n      const response = await steinhqAPI.put(`/disparo/${clientId}`, {\n        disparo: newCount.toString()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar disparo:', error);\n      throw error;\n    }\n  },\n  \n  // Criar novo registro de disparo (POST)\n  create: async (clientId, initialCount = 1) => {\n    try {\n      const response = await steinhqAPI.post('/disparo', {\n        id: clientId,\n        disparo: initialCount.toString()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar registro de disparo:', error);\n      throw error;\n    }\n  },\n  \n  // Incrementar contagem de disparo (busca, verifica e atualiza/cria)\n  increment: async (clientId, incrementBy = 1) => {\n    try {\n      console.log(`ðŸ“Š Incrementando disparo para cliente ${clientId} em ${incrementBy}`);\n      \n      // Buscar registro atual\n      const currentRecord = await dispatchAPI.getById(clientId);\n      \n      if (currentRecord) {\n        // Registro existe - fazer PUT\n        const currentCount = currentRecord.disparo === null ? 0 : parseInt(currentRecord.disparo) || 0;\n        const newCount = currentCount + incrementBy;\n        \n        console.log(`ðŸ“Š Atualizando de ${currentCount} para ${newCount}`);\n        await dispatchAPI.update(clientId, newCount);\n        return newCount;\n      } else {\n        // Registro nÃ£o existe - fazer POST\n        console.log(`ðŸ“Š Criando novo registro com ${incrementBy} disparos`);\n        await dispatchAPI.create(clientId, incrementBy);\n        return incrementBy;\n      }\n    } catch (error) {\n      console.error('Erro ao incrementar disparo:', error);\n      throw error;\n    }\n  },\n  \n  // Obter contagem atual de disparo para um cliente\n  getCount: async (clientId) => {\n    try {\n      const record = await dispatchAPI.getById(clientId);\n      if (record) {\n        return record.disparo === null ? 0 : parseInt(record.disparo) || 0;\n      }\n      return 0;\n    } catch (error) {\n      console.error('Erro ao obter contagem de disparo:', error);\n      return 0;\n    }\n  }\n};\n\n// ==================== WHATSAPP INSTANCE API ====================\nexport const instanceAPI = {\n  // Verificar estado da conexÃ£o\n  checkConnectionState: async (instanceId, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(`/instance/connectionState/${instanceId}`, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao verificar estado da conexÃ£o:', error);\n      throw error;\n    }\n  },\n  \n  // Conectar instÃ¢ncia\n  connect: async (instanceId, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(`/instance/connect/${instanceId}`, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao conectar instÃ¢ncia:', error);\n      throw error;\n    }\n  },\n  \n  // Criar instÃ¢ncia\n  create: async (instanceData, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = {\n        'Content-Type': 'application/json',\n        ...createWhatsAppHeaders(apiKey, useUserAgentRotation)\n      };\n      const response = await whatsappAPI.post('/instance/create', instanceData, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar instÃ¢ncia:', error);\n      throw error;\n    }\n  },\n  \n  // Fazer logout da instÃ¢ncia\n  logout: async (instanceId, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.delete(`/instance/logout/${instanceId}`, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao fazer logout da instÃ¢ncia:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== WHATSAPP GROUPS API ====================\nexport const groupsAPI = {\n  // Buscar todos os grupos\n  fetchAll: async (instanceId, apiKey, getParticipants = true, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(\n        `/group/fetchAllGroups/${instanceId}?getParticipants=${getParticipants}`, \n        { headers }\n      );\n      return response.data || [];\n    } catch (error) {\n      console.error('Erro ao buscar grupos:', error);\n      return [];\n    }\n  },\n  \n  // Buscar informaÃ§Ãµes de um grupo especÃ­fico\n  getInfo: async (instanceId, groupJid, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(\n        `/group/findGroupInfos/${instanceId}?groupJid=${encodeURIComponent(groupJid)}`,\n        { headers }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar informaÃ§Ãµes do grupo:', error);\n      throw error;\n    }\n  },\n  \n  // Criar grupo\n  create: async (instanceId, groupData, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = {\n        'Content-Type': 'application/json',\n        ...createWhatsAppHeaders(apiKey, useUserAgentRotation)\n      };\n      const response = await whatsappAPI.post(`/group/create/${instanceId}`, groupData, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar grupo:', error);\n      throw error;\n    }\n  },\n  \n  // Sair do grupo\n  leave: async (instanceId, groupJid, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.delete(\n        `/group/leaveGroup/${instanceId}?groupJid=${encodeURIComponent(groupJid)}`,\n        { headers }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao sair do grupo:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== WHATSAPP CONTACTS API ====================\nexport const contactsAPI = {\n  // Buscar todos os contatos\n  fetchAll: async (instanceId, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = createWhatsAppHeaders(apiKey, useUserAgentRotation);\n      const response = await whatsappAPI.get(`/chat/fetchContacts/${instanceId}`, { headers });\n      return response.data?.contacts || [];\n    } catch (error) {\n      console.error('Erro ao buscar contatos:', error);\n      return [];\n    }\n  }\n};\n\n// ==================== WHATSAPP MESSAGES API ====================\nexport const messagesAPI = {\n  // Enviar mensagem de texto\n  sendText: async (instanceId, messageData, apiKey, useUserAgentRotation = false) => {\n    try {\n      const headers = {\n        'Content-Type': 'application/json',\n        ...createWhatsAppHeaders(apiKey, useUserAgentRotation)\n      };\n      const response = await whatsappAPI.post(`/message/sendText/${instanceId}`, messageData, { headers });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao enviar mensagem:', error);\n      throw error;\n    }\n  }\n};\n\n// ==================== UTILITY FUNCTIONS ====================\nexport const apiUtils = {\n  // Validar e formatar nÃºmero de telefone\n  validateAndFormatPhoneNumber: (number) => {\n    if (!number) return null;\n    let formattedNumber = number.replace(/[^\\d@\\.\\-]/g, '');\n    if (!/^\\d+/.test(formattedNumber)) return null;\n    return formattedNumber;\n  },\n  \n  // Extrair nÃºmero do ID do WhatsApp\n  extractPhoneNumber: (whatsappId) => {\n    if (!whatsappId) return null;\n    return whatsappId.split('@')[0];\n  },\n  \n  // Normalizar nÃºmeros para comparaÃ§Ã£o\n  normalizePhoneNumber: (number) => {\n    if (!number) return '';\n    const cleaned = number.toString().replace(/\\D/g, '');\n    if (cleaned.startsWith('55') && cleaned.length > 11) {\n      return cleaned.substring(2);\n    }\n    return cleaned;\n  },\n  \n  // Obter user agent aleatÃ³rio\n  getRandomUserAgent,\n  \n  // Criar headers para WhatsApp\n  createWhatsAppHeaders\n};\n\n// ExportaÃ§Ã£o padrÃ£o com todas as APIs\nexport default {\n  auth: authAPI,\n  dispatch: dispatchAPI,\n  instance: instanceAPI,\n  groups: groupsAPI,\n  contacts: contactsAPI,\n  messages: messagesAPI,\n  utils: apiUtils\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}